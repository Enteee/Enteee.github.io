version: '2.1'

services:
    #
    # Base image
    #
    debian-dockerize:
        image: debian-dockerize
        build:
            context: ${CONTAINER_DIR}/debian-dockerize
            args:
                - debian_version=${DEBIAN_VERSION}
                - dockerize_version=${DOCKERIZE_VERSION}
                - service_gid=${SERVICE_GID}
                - service_group=${SERVICE_GROUP}
                - service_uid=${SERVICE_UID}
                - service_user=${SERVICE_USER}
                - service_user_HOME=${SERVICE_USER_HOME}

    #
    # Services
    #
    jekyll:
        build:
            context: ${CONTAINER_DIR}/jekyll
            args:
                - jekyll_version=${JEKYLL_VERSION}
        command: jekyll build --watch
        volumes:
            - ../:/srv/jekyll:ro
            - www:/srv/jekyll/_site:rw

    jekyll-dev:
        build:
            context: ${CONTAINER_DIR}/jekyll
            args:
                - jekyll_version=${JEKYLL_VERSION}
        command: jekyll build --drafts --watch
        volumes:
            - ../:/srv/jekyll:ro
            - www-dev:/srv/jekyll/_site:rw

    nginx-http:
        depends_on:
            - debian-dockerize
        build:
            context: ${CONTAINER_DIR}/nginx-http
            args:
                - nginx_version=${NGINX_VERSION}
        command:
            -stdout /var/log/nginx/access.log
            -stderr /var/log/nginx/error.log
            ./start.sh
        ports:
            - 80:80
            - 8080:8080
        volumes:
            - acme-challenge:/usr/share/nginx/letsencrypt/.well-known/acme-challenge:ro
            - www-dev:/usr/share/nginx/html:ro
            - ${CONTAINER_DIR}/nginx-http/sites-enabled:/etc/nginx/sites-enabled/:ro
            - ${CONTAINER_DIR}/nginx-http/htpasswd:/etc/nginx/.htpasswd:ro
        networks:
            backbone:
                aliases:
                    - nginx-http

    nginx-https:
        depends_on:
            - debian-dockerize
            - isso
        build: ${CONTAINER_DIR}/nginx-https
        command:
            -wait file:///certs/duckpond.ch/cert.pem
            -wait file:///certs/duckpond.ch/privkey.pem
            -wait file:///certs/duckpond.ch/fullchain.pem
            -timeout ${DOCKERIZE_TIMEOUT}
            -stdout /var/log/nginx/access.log
            -stderr /var/log/nginx/error.log
            ./start.sh
        ports:
            - 443:443
        volumes:
            - certs:/certs/:ro
            - www:/usr/share/nginx/html:ro
            - ${CONTAINER_DIR}/nginx-https/sites-enabled:/etc/nginx/sites-enabled/:ro
        volumes_from:
            - cryptpad:ro
        networks:
            backbone:
                aliases:
                    - duckpond.ch
                    - nginx-https

    letsencrypt:
        depends_on:
            - debian-dockerize
            - nginx-http
        build:
            context: ${CONTAINER_DIR}/dehydrated
            args:
                - docker_version=${DOCKER_VERSION}
        command: ./start.sh
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - ${CONTAINER_DIR}/dehydrated/etc:/etc/dehydrated:ro

            - certs:/rw/certs:rw
            - ${CONTAINER_DIR}/mailcow/data/assets/ssl:/rw/certs_mailcow:rw
            - acme-challenge:/rw/acme-challenge:rw
            - letsencrypt-accounts:/rw/accounts:rw

    isso:
        depends_on:
            - debian-dockerize
        build:
            context: ${CONTAINER_DIR}/isso
            args:
                - isso_version=${ISSO_VERSION}
        command:
            -wait tcp://nginx-https:443
            -timeout ${DOCKERIZE_TIMEOUT}
            ./start.sh
        volumes:
            - ${CONTAINER_DIR}/isso/config:/config:ro

            - isso-db:/rw/db:rw
        networks:
            backbone:
                aliases:
                    - blog-isso
            mailcow-network:
                aliases:
                    - mailcow-isso

    challenges:
        depends_on:
            - debian-dockerize
        build:
            context: ${CONTAINER_DIR}/challenges
            args:
                - python_version=${PYTHON_VERSION}
        ports:
            - 8888:8888
            - 8889:8889

    cryptpad:
        depends_on:
            - debian-dockerize
        build:
            context: ${CONTAINER_DIR}/cryptpad
            args:
                - cryptpad_version=${CRYPTPAD_VERSION}
                - cryptpad_htpasswd_user=${CRYPTPAD_HTPASSWD_USER}
                - cryptpad_htpasswd_password=${CRYPTPAD_HTPASSWD_PASSWORD}
        command: ./start.sh
        volumes:
            - ${CONTAINER_DIR}/cryptpad/customize/:/cryptpad/customize:ro
            - ${CONTAINER_DIR}/cryptpad/config/:/cryptpad/config:ro

            - cryptpad-blob:/cryptpad/blob:rw
            - cryptpad-block:/cryptpad/block:rw
            - cryptpad-data:/cryptpad/data:rw
            - cryptpad-datastore:/cryptpad/datastore:rw
        networks:
            backbone:
                aliases:
                    - cryptpad
        ulimits:
            nofile:
              soft: 1000000
              hard: 1000000

    syncthing:
        depends_on:
            - debian-dockerize
        build:
            context: ${CONTAINER_DIR}/syncthing
            args:
                - syncthing_version=${SYNCTHING_VERSION}
        command: ./start.sh
        ports:
            - 22000:22000
            - 21027:21027/udp
        volumes:
            - syncthing-config:/rw/syncthing:rw
            #
            # Sync Folders
            #
            - certs:/service/certs:rw
            - letsencrypt-accounts:/service/letsencrypt-accounts:rw
            - isso-db:/service/isso-db:rw
            - cryptpad-blob:/service/cryptpad-blob:rw
            - cryptpad-block:/service/cryptpad-block:rw
            - cryptpad-data:/service/cryptpad-data:rw
            - cryptpad-datastore:/service/cryptpad-datastore:rw
            - volume-backup:/service/volume-backup:rw
        networks:
            backbone:
                aliases:
                    - syncthing

    volume-sync:
        depends_on:
            - debian-dockerize
        build:
            context: ${CONTAINER_DIR}/volume-sync
            args:
                - borgbackup_version=${BORGBACKUP_VERSION}
                - borgbackup_repo=${BORG_REPO}
                - borgbackup_volumes=${BORG_VOLUMES}
        environment:
            - BORG_PASSPHRASE=${BORG_PASSPHRASE}
            - BORG_REPO=${BORG_REPO}
            - BORG_VOLUMES=${BORG_VOLUMES}
            - VOLUME_SYNC_SLEEP_TIME=${VOLUME_SYNC_SLEEP_TIME}
        labels:
            volume-sync_pause: "false"
        command: ./start.sh
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - volume-backup:${BORG_REPO}:rw
            #
            # Backup Folders
            #
            - certs:${BORG_VOLUMES}/certs:ro
            - letsencrypt-accounts:${BORG_VOLUMES}/letsencrypt-accounts:ro
            - isso-db:${BORG_VOLUMES}/isso-db:ro
            - cryptpad-blob:${BORG_VOLUMES}/cryptpad-blob:ro
            - cryptpad-block:${BORG_VOLUMES}/cryptpad-block:ro
            - cryptpad-data:${BORG_VOLUMES}/cryptpad-data:ro
            - cryptpad-datastore:${BORG_VOLUMES}/cryptpad-datastore:ro

volumes:
    #
    # No Backup
    #
    www:
    www-dev:
    acme-challenge:
    syncthing-config:

    #
    # Backup
    #
    certs:
    letsencrypt-accounts:

    isso-db:

    cryptpad-blob:
    cryptpad-block:
    cryptpad-data:
    cryptpad-datastore:

    #
    # Sync
    #
    volume-backup:

networks:
    backbone:
#    mailcow-network:
